####################################################################
# Makefile                                                         #
####################################################################

.SUFFIXES:				# ignore builtin rules
.PHONY: all debug release clean

####################################################################
# Definitions                                                      #
####################################################################

DEVICE = EFM32GG990F1024
PROJECTNAME = 6_prs_gpio_timer_GG

OBJ_DIR = build
EXE_DIR = exe
LST_DIR = lst

####################################################################
# Definitions of toolchain.                                        #
# You might need to do changes to match your system setup          #
####################################################################

# Change path to CodeSourcery tools according to your system configuration
WINDOWSCS ?= CodeSourcery/Sourcery G++ Lite
LINUXCS   ?= /cad/codesourcery/arm-none-eabi/arm-2010q1

SHELLNAMES = $(ComSpec)$(COMSPEC)

ifeq ($(SHELLNAMES),)
  # Assume we are making on a Linux platform
  TOOLDIR = $(LINUXCS)
  RM = rm -rf
  $(shell mkdir $(OBJ_DIR)>/dev/null 2>&1)
  $(shell mkdir $(EXE_DIR)>/dev/null 2>&1)
  $(shell mkdir $(LST_DIR)>/dev/null 2>&1)
  ifeq (clean,$(findstring clean, $(MAKECMDGOALS)))
    ifneq ($(filter $(MAKECMDGOALS),all debug release),)
      $(shell $(RM) $(OBJ_DIR)/*>/dev/null 2>&1)
      $(shell $(RM) $(EXE_DIR)/*>/dev/null 2>&1)
      $(shell $(RM) $(LST_DIR)/*>/dev/null 2>&1) #*/
    endif
  endif
else
  ifneq ($(COMSPEC),)
    # Assume we are making on a mingw/msys/cygwin platform running on Windows
    TOOLDIR = $(PROGRAMFILES)/$(WINDOWSCS)
    RM = rm -rf
  else
    # Assume we are making on a Windows platform
    TOOLDIR = $(ProgramFiles)/$(WINDOWSCS)
    RM = "$(TOOLDIR)/bin/cs-rm" -rf
  endif
  QUOTE ="
  $(shell mkdir $(OBJ_DIR)>nul 2>&1)
  $(shell mkdir $(EXE_DIR)>nul 2>&1)
  $(shell mkdir $(LST_DIR)>nul 2>&1)
  ifeq (clean,$(findstring clean, $(MAKECMDGOALS)))
    ifneq ($(filter $(MAKECMDGOALS),all debug release),)
      $(shell $(RM) $(OBJ_DIR)/*>nul 2>&1)
      $(shell $(RM) $(EXE_DIR)/*>nul 2>&1)
      $(shell $(RM) $(LST_DIR)/*>nul 2>&1) #*/
    endif
  endif
endif

CC      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-gcc$(QUOTE)
LD      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ld$(QUOTE)
AR      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ar$(QUOTE)
OBJCOPY = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objcopy$(QUOTE)
DUMP    = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objdump$(QUOTE)

####################################################################
# Flags                                                            #
####################################################################

# -MMD : Don't generate dependencies on system header files.
# -MP  : Add phony targets, useful when a h-file is removed from a project.
# -MF  : Specify a file to write the dependencies to.
DEPFLAGS = -MMD -MP -MF $(@:.o=.d)

#
# Add -Wa,-ahld=$(LST_DIR)/$(@F:.o=.lst) to CFLAGS to produce assembly list files
#
override CFLAGS += -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m3 -mthumb -ffunction-sections \
-fdata-sections -mfix-cortex-m3-ldrd -fomit-frame-pointer       \
$(DEPFLAGS)

ASMFLAGS += -x assembler-with-cpp -mcpu=cortex-m3 -mthumb

#
# NOTE: The -Wl,--gc-sections flag may interfere with debugging using gdb.
#
override LDFLAGS += -Xlinker -Map=$(LST_DIR)/$(PROJECTNAME).map -mcpu=cortex-m3 \
-mthumb -T../../../Device/EnergyMicro/EFM32GG/Source/G++/efm32gg.ld \
 -Wl,--gc-sections

LIBS = -Wl,--start-group -lgcc -lc -lcs3 -lcs3unhosted   -Wl,--end-group

INCLUDEPATHS += \
-I.. \
-I../../../CMSIS/Include \
-I../../../Device/EnergyMicro/EFM32GG/Include \
-I../../../emlib/inc \
-I../../../kits/EFM32GG_STK3700/bsp \
-I../../../kits/EFM32GG_STK3700/drivers

####################################################################
# Files                                                            #
####################################################################

C_SRC +=  \
../../../Device/EnergyMicro/EFM32GG/Source/system_efm32gg.c \
../../../kits/EFM32GG_STK3700/drivers/segmentlcd.c \
../../../kits/EFM32GG_STK3700/drivers/segmentfont.c \
../../../emlib/src/em_assert.c \
../../../emlib/src/em_system.c \
../../../emlib/src/em_cmu.c \
../../../emlib/src/em_emu.c \
../../../emlib/src/em_gpio.c \
../../../emlib/src/em_lcd.c \
../../../emlib/src/em_prs.c \
../../../emlib/src/em_timer.c \
../6_prs_gpio_timer.c

s_SRC +=  \
../../../Device/EnergyMicro/EFM32GG/Source/G++/startup_efm32gg.s

S_SRC +=

####################################################################
# Rules                                                            #
####################################################################

C_FILES = $(notdir $(C_SRC) )
S_FILES = $(notdir $(S_SRC) $(s_SRC) )
#make list of source paths, sort also removes duplicates
C_PATHS = $(sort $(dir $(C_SRC) ) )
S_PATHS = $(sort $(dir $(S_SRC) $(s_SRC) ) )

C_OBJS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.o))
S_OBJS = $(if $(S_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.S=.o)))
s_OBJS = $(if $(s_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.s=.o)))
C_DEPS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.d))
OBJS = $(C_OBJS) $(S_OBJS) $(s_OBJS)

vpath %.c $(C_PATHS)
vpath %.s $(S_PATHS)
vpath %.S $(S_PATHS)

# Default build is debug build
all:      debug

debug:    CFLAGS += -DDEBUG -O0 -g3
debug:    $(EXE_DIR)/$(PROJECTNAME).bin

release:  CFLAGS += -DNDEBUG -O0 -g 
release:  $(EXE_DIR)/$(PROJECTNAME).bin

# Create objects from C SRC files
$(OBJ_DIR)/%.o: %.c
	@echo "Building file: $<"
	$(CC) $(CFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Assemble .s/.S files
$(OBJ_DIR)/%.o: %.s
	@echo "Assembling $<"
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(OBJ_DIR)/%.o: %.S
	@echo "Assembling $<"
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Link
$(EXE_DIR)/$(PROJECTNAME).out: $(OBJS)
	@echo "Linking target: $@"
	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $(EXE_DIR)/$(PROJECTNAME).out

# Create binary file
$(EXE_DIR)/$(PROJECTNAME).bin: $(EXE_DIR)/$(PROJECTNAME).out
	@echo "Creating binary file"
	$(OBJCOPY) -O binary $(EXE_DIR)/$(PROJECTNAME).out $(EXE_DIR)/$(PROJECTNAME).bin
# Uncomment next line to produce assembly listing of entire program
#	$(DUMP) -h -S -C $(EXE_DIR)/$(PROJECTNAME).out>$(LST_DIR)/$(PROJECTNAME)out.lst

clean:
ifeq ($(filter $(MAKECMDGOALS),all debug release),)
	$(RM) $(OBJ_DIR) $(LST_DIR) $(EXE_DIR)
endif

# include auto-generated dependency files (explicit rules)
ifneq (clean,$(findstring clean, $(MAKECMDGOALS)))
-include $(C_DEPS)
endif
